## Description of Tables

There are three tables involved in this database: `transactions`, `segments` and
`products`, which simulate a simplified retail data schema.  Here is a semantic
description of the tables:

1. `transactions`: contains detailed information about each product a customer
   has purchased.  A transaction consists of one or more products purchased by
   a customer indexed by a unique transaction id.
   * `trans_id`: the transaction id
   * `cust_id`: the customer id
   * `prod_id`: the product id
   * `item_qty`: the quantity of the product that is being purchased
   * `item_price`: the per unit price of the product (NOTE: the total revenue
     for a product is `item_qty * item_price`)
2. `products`: contains detailed attributes about each product.
   * `prod_id`: the product id (same meaning as in `transactions`)
   * `prod_name`: the product name
   * `brand`: the brand of the product
   * `category`: the category of the product
3. `segments`: contains a history of customer segmentation labelling for each
   customer.  Segments are computed periodically for all current customers and
   appended to the table after each computation.  The current (most up to date)
   active segment for each customer is specified by `active_flag = 'Y'` column.
   * `cust_id`: the customer id (same meaning as in `transactions`)
   * `seg_name`: the segment of this customer
   * `update_dt`: the date when this segment was updated
   * `active_flag`: whether or not this segment is the active segment for this customer

## Sample Database

Included is a sample SQLite3 database for the above tables named `sample.db`.
Please refer to https://www.sqlite.org/download.html to download command-line
tools so you can run your queries against the sample data.

## Problems
1. Find the current active segment for each customer sorted by the segment
   update date.  The output should contain three columns: `cust_id`,
   `seg_name`, `updated_at`.  Here is some sample output:

        cust_id     seg_name        updated_at
        4402        LAPSED          2014-06-01 00:00:00
        11248       ONE-OFFS        2015-10-01 00:00:00
        ##################################
SELECT cust_id,seg_name,update_at
FROM segments
GROUP BY cust_id;
###################################################################
2. For each product purchased between Jan 2016 and May 2016 (inclusive), find
   the number of distinct transactions.  The output should contain `prod_id`,
   `prod_name` and distinct transaction columns.  Here is some sample output:

        prod_id     prod_name       count
        199922      Product 199922  1
        207344      Product 207344  1
        209732      Product 209732  1
        ####################################################
SELECT t.prod_id,p.prod_name,COUNT(*) AS count
FROM transactions t
JOIN products p
USING (prod_id) 
WHERE DATE(trans_dt) BETWEEN "2015-12-31" AND "2016-06-01"
GROUP BY t.prod_id, p.prod_name;
################################################################

3. Find the most recent segment of each customer as of 2016-03-01.
   *Hint*: You cannot simply use `active_flag` since that is as of the current
   date *not* 2016-03-01.  The output should contain the `cust_id`, `seg_name`
   and `update_at`  columns and should have at most one row per customer.  Here
   is some sample output:

       cust_id  seg_name    update_at
       4402     ONE-OFFS    2016-02-01 00:00:00
       11248    LOYAL       2016-02-01 00:00:00
       126169   ONE-OFFS    2015-03-01 00:00:00
  ########################################################
SELECT cust_id,seg_name,MAX(update_at)
FROM segments
WHERE cust_id NOT IN 
(SELECT DISTINCT cust_id
FROM segments
WHERE update_at > "2016-03-01") AND
cust_id NOT IN
(SELECT DISTINCT cust_id
FROM segments
WHERE seg_name="Gone away")
GROUP BY cust_id;
###############################################################

4. Find the most popular category (by revenue) for each active segment.
   *Hint*: The current (most up to date) active segment is specified by `active_flag = 'Y'` column in the segments table.
   Here is the some sample output:
	
  	seg_name    category    revenue
	INFREQUENT  Women       20264
  #######################################################################
SELECT seg_name,category, MAX(revenue)
FROM (SELECT s.seg_name, p.category, ROUND(SUM(t.item_qty*t.item_price),0) AS "revenue"
FROM transactions t
JOIN prpducts p
USING (prod_id)
JOIN segments s
USING (cust_id)
WHERE active_flag ="Y"
GROUP BY s.seg_name,p.category)
GROUP BY seg_name;
#########################################################################################################

5. Use the current sample database to find insights. Please document your steps, include any code/documents you used
A) Total Revenue
####################
SELECT ROUND(SUM(item_qty*item_price),0 AS "total_revenue"
FROM transactions;
#############Result=103188################
B) Revenue produced by each Customers Segment
#####################################
SELECT s.seg_name, ROUND(SUM(t.item_qty*t.item_price),0) AS "seg_revenue",
ROUND(SUM(t.item_qty*t.item_price/103188,2)*100 AS "seg_revenue_percent"
FROM transactions t
JOIN (SELECT cust_id, seg_name, MAX(update_at)
FROM segments
GROUP BY cust_id) s
USING (cust_id)
GROUP BY s.seg_name
ORDER BY "seg_revenue_percent" DESC;
##########################################################
C)Total Number of Customers
######################################
SELECT COUNT(DISTINCT cust_id)
FROM segments;
#############Result=1000################
D) Customers Segment Demographics
################################
SELECT s.seg_name, COUNT(DISTINCTcust_id),
(COUNT(DISTINCT cust_id))*0.1)) AS sg_count_percent"
FROM (SELECT cust_id, seg_name, MAX(update_at)
FROM segments
GROUP BY cust_id) 
GROUP BY seg_name
ORDER BY COUNT(DISTINCT cust_id) DESC;
################################
E)Top Revenue-Making Customers (+1% Contribution)
###################################
SELECT t.cust_id, s.seg_name,s.active_flag,
ROUND(SUM(t.item_qty*t.item_price),0) AS "cust_revenue",
ROUND(SUM(t.item_qty*t.item_price/103188,2)*100 AS "cust_revenue_percent"
FROM transactions t
JOIN (SELECT cust_id, active_flag, MAX(update_at)
FROM segments
GROUP BY cust_id) s
USING (cust_id)
GROUP BY t.cust_id
HAVING ROUND(SUM(t.item_qty*t.item_price/103188,2)*100>=1
ORDER BY cust_revenue DESC
LIMIT 10;
###################################################
F) Category Revenue + Total Revenue Percentage
##################################################
SELECT p.category, ROUND(SUM(t.item_qty*t.item_price),0) AS "cat_revenue",
ROUND(SUM(t.item_qty*t.item_price/103188,2)*100 AS "cat_revenue_percent"
FROM transactions t
JOIN products p
USING (prod_id)
GROUP BY p.category
ORDER BY "cat_revenue_percent" DESC;
###############################################
G)Total Number of Products
#################################
SELECT COUNT(DISTINCT prod_id)
FROM products;
##########################Result=1863####################
H) Revenue produced by each Product Category
###########################################
SELECT category, COUNT(DISTINCT prod_id),
ROUND(COUNT(DISTINCT prod_id)* 0.05367) AS "cat_count_percent",
FROM products
GROUP BY category
ORDER BY COUNT(DISTINCT prod_id) DESC;
################################################
I) Best-selling + Worst-selling Products
####################################Best#####################
SELECT p.prod_id,p.category,p.brand,
ROUND(SUM(t.item_qty*t.item_price),0) AS "cat_revenue",
ROUND(SUM(t.item_qty*t.item_price/103188,2)*100 AS "prod_revenue_percent"
FROM transactions t
JOIN products p
USING (prod_id)
GROUP BY p.prod_id
ORDER BY "prod_revenue" DESC
LIMIT 5;
#####################################Worst#############################
SELECT p.prod_id,p.category,p.brand,
ROUND(SUM(t.item_qty*t.item_price),0) AS "prod_revenue",
ROUND(SUM(t.item_qty*t.item_price/103188,2)*100 AS "prod_revenue_percent"
FROM transactions t
JOIN products p
USING (prod_id)
GROUP BY p.prod_id
ORDER BY "prod_revenue" ASC
LIMIT 5;
#################################
J)Monthly Revenue + Total Revenue Percentage
#############################################
SELECT strftime("%m", DATE(trans_dt) AS "trans_month")
ROUND(SUM(t.item_qty*t.item_price),0) AS "month_revenue",
ROUND(SUM(t.item_qty*t.item_price/103188,2)*100 AS "month_revenue_percent"
FROM transactions 
GROUP BY "trans_month"
ORDER BY "month_revenue" DESC;
################################
K)Hourly Revenue + Total Revenue Percentage
#################################################
SELECT strftime("%h", trans_dt) AS "trans_hour")
ROUND(SUM(item_qty*item_price),0) AS "hour_revenue",
ROUND(SUM(item_qty*item_price/103188,2)*100 AS "hour_revenue_percent"
FROM transactions 
GROUP BY "trans_hour"
ORDER BY "hour_revenue" DESC;
#########################################################
L)Total Number of Transactions
###################################################
SELECT count(trans_id)
FROM transactions;
############################Result=2666######################
M) Monthly Transactions + Total Transactions Percentage
##############################################
SELECT strftime("%m", DATE(trans_dt) AS "trans_month"),
ROUND(COUNT(trans_id)) AS "month_revenue",
ROUND(COUNTD(ISTINCT prod_id)*0.0375 AS "month_revenue_percent"
FROM transactions 
GROUP BY "trans_month"
ORDER BY "month_revenue" DESC;
####################################
N) Hourly Transactions + Total Transactions Percentage
##########################################
SELECT strftime("%H", trans_dt) AS "trans_hour",
ROUND(COUNT(trans_id)) AS "hour_revenue",
ROUND(COUNTD(ISTINCT prod_id)*0.037509377 AS "hour_revenue_percent"
FROM transactions 
GROUP BY "trans_hour"
ORDER BY "hour_revenue" DESC;
